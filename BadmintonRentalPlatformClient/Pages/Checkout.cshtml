@page "/Checkout"
@model BadmintonRentalPlatformClient.Pages.CheckoutModel
@{
    ViewData["Title"] = "Thanh toán";
}
<style>
    .bg-primary-custom {
        background-color: #dfa974 !important;
    }

    .btn-primary-custom {
        background-color: #dfa974 !important;
        color: #fff !important;
        border-color: #dfa974 !important;
    }

        .btn-primary-custom:hover {
            background-color: #fff !important;
            color: #dfa974 !important;
            border-color: #dfa974 !important;
        }

    #cart-summary {
        max-height: 400px; /* Giới hạn chiều cao */
        overflow-y: auto; /* Thêm thanh cuộn dọc */
    }

    .card-custom {
        margin-bottom: 20px;
    }

    .payment-method {
        margin-top: 20px;
    }

    .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 1.75rem 0.375rem 0.75rem;
        -moz-padding-start: calc(0.75rem - 3px);
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        -webkit-transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }

        .form-select:focus {
            border-color: #80bdff;
            outline: 0;
            -webkit-box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }
</style>
<div class="container mt-5">
    <h1 class="text-center">Thanh toán</h1>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card card-custom">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Thông tin người dùng</h2>
                </div>
                <div class="card-body" id="user-info">
                    <p>Đang tải...</p>
                </div>
            </div>
            <div class="card card-custom payment-method">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Phương thức thanh toán</h2>
                </div>
                <div class="card-body">
                    <select id="payment-method" class="form-select">
                        <option value="">Chọn phương thức thanh toán</option>
                        <!-- Các tùy chọn khác sẽ được thêm vào động -->
                    </select>
                </div>

            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card card-custom">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Tóm tắt giỏ hàng</h2>
                </div>
                <div class="card-body" id="cart-summary">
                    <p>Đang tải...</p>
                </div>
            </div>
        </div>
    </div>
    <div class="text-center mt-3">
        <button id="confirm-button" class="btn btn-primary-custom btn-lg">Xác Nhận Đặt Sân</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const userInfo = JSON.parse(localStorage.getItem('userInfo'));
        if (!userInfo || !userInfo.id) {
            Swal.fire({
                title: 'Lỗi!',
                text: "Không tìm thấy thông tin người dùng. Vui lòng đăng nhập lại.",
                icon: 'error',
                confirmButtonColor: '#dfa974'
            }).then(() => {
                window.location.href = '/account/login';
            });
            return;
        }

        const userId = userInfo.id;
        const userApiUrl = `https://localhost:7020/api/v1/users/${userId}`;
        const paymentApiUrl = `https://localhost:7020/api/v1/payments`;
        const cart = JSON.parse(localStorage.getItem('cart')) || [];

        if (cart.length === 0) {
            Swal.fire({
                title: 'Giỏ hàng trống',
                text: "Bạn chưa có sản phẩm nào trong giỏ hàng. Bạn sẽ được chuyển hướng về trang chủ.",
                icon: 'info',
                confirmButtonColor: '#dfa974'
            }).then(() => {
                window.location.href = '/badmintoncourt/index';
            });
            return;
        }

        function formatCurrency(value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        console.log('Fetching user data from:', userApiUrl);
        fetch(userApiUrl)
            .then(response => response.json())
            .then(data => {
                console.log('User data response:', data);
                if (data.statusCode === 200) {
                    const user = data.data;
                    document.getElementById('user-info').innerHTML = `
                <p><strong>Họ tên:</strong> ${user.fullName}</p>
                <p><strong>Email:</strong> ${user.email}</p>
                <p><strong>Số điện thoại:</strong> ${user.phoneNumber}</p>
                <p><strong>Địa chỉ:</strong> ${user.address}</p>
                <p><strong>Ngày sinh:</strong> ${formatDate(user.dateOfBirth)}</p>
            `;
                } else {
                    document.getElementById('user-info').innerHTML = `<p>Không thể tải thông tin người dùng.</p>`;
                }
            })
            .catch(error => {
                console.error('Error fetching user data:', error);
            });

        console.log('Fetching payment methods from:', paymentApiUrl);
        fetch(paymentApiUrl)
            .then(response => response.json())
            .then(data => {
                console.log('Payment methods response:', data);
                if (data.statusCode === 200) {
                    const payments = data.data;
                    const paymentSelect = document.getElementById('payment-method');

                    const paymentMethodMap = {
                        "Cash": "Tiền mặt",
                        "Bank Transfer": "Chuyển khoản ngân hàng"
                    };

                    payments.filter(payment => payment.paymentStatus === "Available")
                        .forEach(payment => {
                            const option = document.createElement('option');
                            option.value = payment.id;
                            option.textContent = paymentMethodMap[payment.paymentMethod] || payment.paymentMethod;
                            paymentSelect.appendChild(option);
                        });
                } else {
                    Swal.fire('Lỗi!', 'Không thể tải phương thức thanh toán. Vui lòng thử lại.', 'error');
                }
            })
            .catch(error => {
                Swal.fire('Lỗi!', 'Không thể kết nối tới máy chủ. Vui lòng thử lại sau.', 'error');
            });

        if (cart.length > 0) {
            let cartSummaryHtml = '<ul class="list-group">';
            let totalMinutes = 0;
            let totalPrice = 0;

            cart.forEach(item => {
                cartSummaryHtml += `
            <li class="list-group-item">
                <p><strong>Ngày:</strong> ${formatDate(item.date)}</p>
                <p><strong>Tên Sân:</strong> ${item.courtName}</p>
                <p><strong>Mã Sân:</strong> ${item.courtCode}</p>
                <p><strong>Giờ:</strong> ${item.timeSlot}</p>
                <p><strong>Giá:</strong> ${formatCurrency(item.price)} vnđ</p>
            </li>
        `;
                totalMinutes += 30;
                totalPrice += item.price;
            });

            cartSummaryHtml += '</ul>';
            cartSummaryHtml += `
        <p class="mt-3"><strong>Tổng thời gian:</strong> ${totalMinutes} phút</p>
        <p><strong>Tổng tiền:</strong> ${formatCurrency(totalPrice)} vnđ</p>
    `;

            document.getElementById('cart-summary').innerHTML = cartSummaryHtml;
        } else {
            document.getElementById('cart-summary').innerHTML = `<p>Giỏ hàng của bạn trống.</p>`;
        }

        document.getElementById('confirm-button').addEventListener('click', function () {
            Swal.fire({
                title: 'Xác Nhận Đặt Sân',
                text: "Bạn có chắc chắn muốn xác nhận đặt sân với các thông tin đã chọn?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dfa974',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có, xác nhận!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const paymentId = document.getElementById('payment-method').value;
                    if (!paymentId) {
                        Swal.fire('Lỗi!', 'Vui lòng chọn phương thức thanh toán.', 'error');
                        return;
                    }

                    const bookingRequest = {
                        userId: userId,
                        notes: 'Đặt sân cầu lông',
                        badmintonCourtId: cart[0].badmintonCourtId,
                        totalPrice: cart.reduce((sum, item) => sum + item.price, 0),
                        paymentId: parseInt(paymentId),
                        bookingCourtSlotRequests: []
                    };

                    const courtSlotMap = new Map();

                    cart.forEach(item => {
                        const startTime = item.timeSlot.split('-')[0] + ":00";
                        const endTime = new Date(`1970-01-01T${startTime}`);
                        endTime.setMinutes(endTime.getMinutes() + 30);
                        const formattedEndTime = endTime.toTimeString().split(' ')[0];

                        if (!courtSlotMap.has(item.courtId)) {
                            courtSlotMap.set(item.courtId, new Map());
                        }

                        if (!courtSlotMap.get(item.courtId).has(item.date)) {
                            courtSlotMap.get(item.courtId).set(item.date, []);
                        }

                        courtSlotMap.get(item.courtId).get(item.date).push({
                            courtId: item.courtId,
                            startTime: startTime,
                            endTime: formattedEndTime
                        });
                    });

                    courtSlotMap.forEach((dates, courtId) => {
                        dates.forEach((slots, date) => {
                            bookingRequest.bookingCourtSlotRequests.push({
                                courtId: courtId,
                                date: new Date(date).toISOString().split('T')[0],
                                bookingCourtSlotRequests: slots
                            });
                        });
                    });

                    console.log('Booking request:', bookingRequest);
                    fetch('https://localhost:7020/api/v1/booking-reservations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(bookingRequest)
                    })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Booking response:', data);
                            if (data.statusCode === 200) {
                                const bookingId = data.data; // Get the booking ID from the response
                                if (parseInt(paymentId) === 1) {
                                    Swal.fire({
                                        title: 'Đã xác nhận!',
                                        text: 'Đơn đặt sân của bạn đã được xác nhận.',
                                        icon: 'success',
                                        confirmButtonColor: '#dfa974'
                                    }).then(() => {
                                        localStorage.removeItem('cart');
                                        window.location.href = '/';
                                    });
                                } else {
                                    fetch(`https://localhost:7020/api/v1/payment/payment?bookingId=${bookingId}`)
                                        .then(response => response.json())
                                        .then(paymentData => {
                                            if (paymentData.statusCode === 200) {
                                                window.location.href = paymentData.data.checkoutUrl; // Use the correct property
                                            } else {
                                                Swal.fire('Lỗi!', 'Có lỗi xảy ra khi tạo liên kết thanh toán. Vui lòng thử lại.', 'error');
                                            }
                                        })
                                        .catch(error => {
                                            Swal.fire('Lỗi!', 'Không thể kết nối tới máy chủ thanh toán. Vui lòng thử lại sau.', 'error');
                                        });
                                }
                            } else {
                                Swal.fire('Lỗi!', 'Có lỗi xảy ra khi đặt sân. Vui lòng thử lại.', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error booking court:', error);
                            Swal.fire('Lỗi!', 'Có lỗi xảy ra khi đặt sân. Vui lòng thử lại.', 'error');
                        });
                }
            });
        });
    });


</script>

