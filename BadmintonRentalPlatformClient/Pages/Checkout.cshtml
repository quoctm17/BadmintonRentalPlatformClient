@page "/Checkout"
@model BadmintonRentalPlatformClient.Pages.CheckoutModel
@{
    ViewData["Title"] = "Thanh toán";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css" integrity="sha384-KyZXEAg3QhqLMpG8r+Knujsl5+5hb7ie4K4e4M5C5R5r5QJ6D6Q6F6G5I5L6L7L6R5L6L6R5T5R6K7K6M5M5Q==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/css/nice-select.css">
<style>
    .bg-primary-custom {
        background-color: #dfa974 !important;
    }

    .btn-primary-custom {
        background-color: #dfa974 !important;
        color: #fff !important;
        border-color: #dfa974 !important;
    }

        .btn-primary-custom:hover {
            background-color: #fff !important;
            color: #dfa974 !important;
            border-color: #dfa974 !important;
        }

    #cart-summary {
        max-height: 400px; /* Giới hạn chiều cao */
        overflow-y: auto; /* Thêm thanh cuộn dọc */
    }

    .card-custom {
        margin-bottom: 20px;
    }

    .payment-method {
        margin-top: 20px;
    }
</style>
<div class="container mt-5">
    <h1 class="text-center">Thanh toán</h1>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card card-custom">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Thông tin người dùng</h2>
                </div>
                <div class="card-body" id="user-info">
                    <p>Đang tải...</p>
                </div>
            </div>
            <div class="card card-custom payment-method">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Phương thức thanh toán</h2>
                </div>
                <div class="card-body">
                    <select id="payment-method" class="form-select">
                        <option value="">Chọn phương thức thanh toán</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card card-custom">
                <div class="card-header bg-primary-custom text-white">
                    <h2 class="card-title mb-0">Tóm tắt giỏ hàng</h2>
                </div>
                <div class="card-body" id="cart-summary">
                    <p>Đang tải...</p>
                </div>
            </div>
        </div>
    </div>
    <div class="text-center mt-3">
        <button id="confirm-button" class="btn btn-primary-custom btn-lg">Xác Nhận Đặt Sân</button>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/js/jquery.nice-select.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const userId = 1; // Đặt ID người dùng của bạn ở đây
        const userApiUrl = `https://localhost:7020/api/v1/users/${userId}`;
        const paymentApiUrl = `https://localhost:7020/api/v1/payments`; // API URL cho phương thức thanh toán
        const cart = JSON.parse(localStorage.getItem('cart')) || [];

        // Nếu giỏ hàng trống, hiển thị thông báo và chuyển hướng người dùng
        if (cart.length === 0) {
            Swal.fire({
                title: 'Giỏ hàng trống',
                text: "Bạn chưa có sản phẩm nào trong giỏ hàng. Bạn sẽ được chuyển hướng về trang chủ.",
                icon: 'info',
                confirmButtonColor: '#dfa974'
            }).then(() => {
                window.location.href = '/badmintoncourt/index';
            });
            return; // Ngừng xử lý nếu giỏ hàng trống
        }

        // Hàm định dạng số tiền
        function formatCurrency(value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        // Hàm định dạng ngày DD/MM/YYYY
        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        // Tải thông tin người dùng
        fetch(userApiUrl)
            .then(response => response.json())
            .then(data => {
                if (data.statusCode === 200) {
                    const user = data.data;
                    document.getElementById('user-info').innerHTML = `
                    <p><strong>Họ tên:</strong> ${user.fullName}</p>
                    <p><strong>Email:</strong> ${user.email}</p>
                    <p><strong>Số điện thoại:</strong> ${user.phoneNumber}</p>
                    <p><strong>Địa chỉ:</strong> ${user.address}</p>
                    <p><strong>Ngày sinh:</strong> ${formatDate(user.dateOfBirth)}</p>
                `;
                } else {
                    document.getElementById('user-info').innerHTML = `<p>Không thể tải thông tin người dùng.</p>`;
                }
            });

        // Tải phương thức thanh toán
        fetch(paymentApiUrl)
            .then(response => response.json())
            .then(data => {
                if (data.statusCode === 200) {
                    const payments = data.data;
                    const paymentSelect = document.getElementById('payment-method');

                    // Chỉ hiển thị các phương thức thanh toán có trạng thái Available và map tên sang tiếng Việt
                    const paymentMethodMap = {
                        "Cash": "Tiền mặt",
                        "Bank Transfer": "Chuyển khoản ngân hàng"
                    };

                    payments.filter(payment => payment.paymentStatus === "Available")
                        .forEach(payment => {
                            const option = document.createElement('option');
                            option.value = payment.id;
                            option.textContent = paymentMethodMap[payment.paymentMethod] || payment.paymentMethod;
                            paymentSelect.appendChild(option);
                        });

                    // Khởi tạo lại nice-select
                    $('select').niceSelect('update');
                } else {
                    Swal.fire('Lỗi!', 'Không thể tải phương thức thanh toán. Vui lòng thử lại.', 'error');
                }
            })
            .catch(error => {
                Swal.fire('Lỗi!', 'Không thể kết nối tới máy chủ. Vui lòng thử lại sau.', 'error');
            });




        // Hiển thị thông tin giỏ hàng
        if (cart.length > 0) {
            let cartSummaryHtml = '<ul class="list-group">';
            let totalMinutes = 0;
            let totalPrice = 0;

            cart.forEach(item => {
                cartSummaryHtml += `
                <li class="list-group-item">
                    <p><strong>Ngày:</strong> ${formatDate(item.date)}</p>
                    <p><strong>Tên Sân:</strong> ${item.courtName}</p>
                    <p><strong>Mã Sân:</strong> ${item.courtCode}</p>
                    <p><strong>Giờ:</strong> ${item.timeSlot}</p>
                    <p><strong>Giá:</strong> ${formatCurrency(item.price)} vnđ</p>
                </li>
            `;
                totalMinutes += 30; // Giả định mỗi slot là 30 phút
                totalPrice += item.price;
            });

            cartSummaryHtml += '</ul>';
            cartSummaryHtml += `
            <p class="mt-3"><strong>Tổng thời gian:</strong> ${totalMinutes} phút</p>
            <p><strong>Tổng tiền:</strong> ${formatCurrency(totalPrice)} vnđ</p>
        `;

            document.getElementById('cart-summary').innerHTML = cartSummaryHtml;
        } else {
            document.getElementById('cart-summary').innerHTML = `<p>Giỏ hàng của bạn trống.</p>`;
        }

        // Xử lý sự kiện nút Xác Nhận Đặt Sân
        document.getElementById('confirm-button').addEventListener('click', function () {
            Swal.fire({
                title: 'Xác Nhận Đặt Sân',
                text: "Bạn có chắc chắn muốn xác nhận đặt sân với các thông tin đã chọn?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dfa974',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có, xác nhận!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const paymentId = document.getElementById('payment-method').value;
                    if (!paymentId) {
                        Swal.fire('Lỗi!', 'Vui lòng chọn phương thức thanh toán.', 'error');
                        return;
                    }

                    const bookingRequest = {
                        userId: userId,
                        notes: 'Đặt sân cầu lông',
                        badmintonCourtId: cart[0].courtId,
                        totalPrice: cart.reduce((sum, item) => sum + item.price, 0),
                        paymentId: parseInt(paymentId),
                        bookingCourtSlotRequests: []
                    };

                    const courtSlotMap = new Map();

                    cart.forEach(item => {
                        const startTime = item.timeSlot.split('-')[0] + ":00";
                        const endTime = new Date(`1970-01-01T${startTime}`);
                        endTime.setMinutes(endTime.getMinutes() + 30);
                        const formattedEndTime = endTime.toTimeString().split(' ')[0];

                        if (!courtSlotMap.has(item.courtId)) {
                            courtSlotMap.set(item.courtId, []);
                        }

                        courtSlotMap.get(item.courtId).push({
                            courtId: item.courtId,
                            startTime: startTime,
                            endTime: formattedEndTime
                        });
                    });

                    courtSlotMap.forEach((slots, courtId) => {
                        bookingRequest.bookingCourtSlotRequests.push({
                            courtId: courtId,
                            date: new Date(cart.find(item => item.courtId === courtId).date).toISOString().split('T')[0],
                            bookingCourtSlotRequests: slots
                        });
                    });

                    // Ghi dữ liệu ra console
                    console.log(JSON.stringify(bookingRequest, null, 2));

                    fetch('https://localhost:7020/api/v1/booking-reservations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(bookingRequest)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.statusCode === 200) {
                                Swal.fire({
                                    title: 'Đã xác nhận!',
                                    text: 'Đơn đặt sân của bạn đã được xác nhận.',
                                    icon: 'success',
                                    confirmButtonColor: '#dfa974'
                                }).then(() => {
                                    localStorage.removeItem('cart');
                                    window.location.href = '/'; // Chuyển hướng về trang chủ
                                });
                            } else {
                                Swal.fire(
                                    'Lỗi!',
                                    'Có lỗi xảy ra khi đặt sân. Vui lòng thử lại.',
                                    'error'
                                );
                            }
                        });

                }
            });
        });

    });

</script>
